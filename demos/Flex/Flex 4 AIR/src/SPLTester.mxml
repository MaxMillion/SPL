<?xml version="1.0" encoding="utf-8"?>
<!--
/*
* SPL; AS3 Spelling library for Flash and the Flex SDK. 
* 
* Copyright (c) 2013 gskinner.com, inc.
* 
* Permission is hereby granted, free of charge, to any person
* obtaining a copy of this software and associated documentation
* files (the "Software"), to deal in the Software without
* restriction, including without limitation the rights to use,
* copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following
* conditions:
* 
* The above copyright notice and this permission notice shall be
* included in all copies or substantial portions of the Software.
* 
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*/
-->
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" paddingLeft="10" paddingTop="10"
		 xmlns:s="library://ns.adobe.com/flex/spark" creationComplete="init()" preinitialize="preInit()"
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" xmlns:spelling="com.gskinner.spelling.*"
		 >

	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		@namespace spelling "com.gskinner.spelling.*";

		TextArea {
			fontFamily:Arial;
			fontSize: 32pt;
		}
		
	</fx:Style>
	
	<fx:Declarations>
		<spelling:SPLCustomWordListLSO />
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.gskinner.spelling.SpellingDictionary;
			import com.gskinner.spelling.SpellingHighlighter;
			import com.gskinner.spelling.SpellingRichEditableTextPluginFactory;
			import com.gskinner.spelling.SpellingTextFieldPluginFactory;
			import com.gskinner.text.ITextHighlighterPluginFactory;
			import com.gskinner.text.PluginFactoryDefaults;
			import com.gskinner.text.RichEditableTextPluginFactory;
			import com.gskinner.text.TextFieldPluginFactory;
			
			import flash.text.engine.FontPosture;
			
			import flashx.textLayout.conversion.ConversionType;
			import flashx.textLayout.conversion.TextConverter;
			
			import mx.collections.ArrayCollection;
			import mx.controls.TextInput;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.managers.PopUpManager;
			
			import spark.components.TitleWindow;
			import spark.events.TextOperationEvent;

			[Embed(systemFont="Arial", fontName="Arial", embedAsCFF="false", mimeType="application/x-font")]
			private static var font:Class;
			
			protected var baseTxt:String;
			protected var mxTextAreaHighlight:SpellingHighlighter;
			protected var sparkTextAreaHighlight:SpellingHighlighter;
			protected var sparkTextInputHighlight:SpellingHighlighter;
			protected var sparkTextPopupInputHighlight:SpellingHighlighter;
			protected var retHighlighter:SpellingHighlighter;
			
			protected function preInit():void {
				PluginFactoryDefaults.factories = [new SpellingRichEditableTextPluginFactory(), new SpellingTextFieldPluginFactory()];
			}
			
			protected function init():void {
				SpellingDictionary.getInstance().useFastMode = true;
				
				baseTxt = 'teh spall is wrng horable Lorem ipsum dolor sit amet, consectetur adipiscing elit.The ContainerCodntroller clafss defines the relationship between a TextFlow object and a container. A TextFlow may have one or more rectangular areas that can hold text; the text is said to be flowing through the containers. Each container is a Sprite that is the parent DisplayObject for the TextLines. Each conteeainer has a ContainerController that manxages the container; the controller hoxlds the targetr width and height for the teext area, rrr the crontainer withe TextLines, and handles scroeelling. Aww contwwroller also has a format assocuuiated with it that allows some formatting attnnributes to be appcvxlied to the text in the container. This allows, for invxvstance, a TextFlow to have one container where the text appvxcears in a single column, and a second container in the same TextvxcFlow with two column text. Not all formatting attribvxcutes that can be applied to the container will affect the text; only the ones that affect container-level layout. The diagram below illustrates the relationship betwdsdseen thwe TextFlow, its flowComposer, and the diswwplay list. blates';

				for (var i:uint=0;i<5;i++) {
					mxTextArea.text += baseTxt;
					textAreaText.appendText(baseTxt);
				}
				
				textAreaText.setStyle('fontFamily', 'Arial');
				
				textAreaText.text = 'textAreaText: ' + textAreaText.text;

				//This is the IFlowComposer class Spark uses
				//new StandardFlowComposer();
				var simpleText:String = "<?xml version=\"1.0\" encoding=\"utf-8\"?>" +
					"<flow:TextFlow xmlns:flow=\"http://ns.adobe.com/textLayout/2008\" verticalScrollPolicy=\"auto\" horizontalScrollPolicy=\"auto\" fontSize=\"14\" textIndent=\"15\" marginBottom=\"15\" paddingTop=\"4\" paddingLeft=\"4\">"+
					
					"<flow:p fontSize='"+randSize()+"'>"+
					"<flow:span id='span1'>teh spall is wrng horable  In the first paragraph of the</flow:span>"+
					"</flow:p>" +
					
					"<flow:p fontSize='25'>"+
					"<flow:span id='span2' color='"+randColor()+"' fontStyle=\"italic\">chh</flow:span><flow:span id='span2' fontStyle=\"bold\">eap</flow:span> "+
					"</flow:p>"+
					
					"<flow:p fontSize='"+randSize()+"'>"+
					"<flow:span id='span2' color='"+randColor()+"' fontStyle=\"italic\">chheap </flow:span>"+
					"</flow:p>"+
					
					"<flow:p fontSize='"+randSize()+"'>"+
					"<flow:span id='span3'>Wfcestern novel, a cowboy meets a saloon girl.</flow:span></flow:p>";

				ret.text = baseTxt;
				
				//*
				var peices:Array = randomText()
				var l:uint = peices.length;
				for (var j:uint=0;j<l;j++) {
					simpleText +=  "<flow:p fontFamily='"+randFont()+"' fontSize='"+randSize()+"'><flow:span id='span"+j+4+"'color='"+randColor()+"' fontStyle=\""+randStyle()+"\">" + peices[j] +
						"</flow:span></flow:p>";
				}
				simpleText += "</flow:TextFlow>";
				
				textAreaFlow.textFlow = TextConverter.importToFlow(simpleText, TextConverter.TEXT_LAYOUT_FORMAT);
				textInputFlow.text = 'The spall is wrng horable  In the furst paragruph of teh';
				
				textAreaFlowHighlight.textFlow = TextConverter.importToFlow(simpleText, TextConverter.TEXT_LAYOUT_FORMAT);
				/*/
				for (var i:uint=0;i<50;i++) {
					textAreaFlow.appendText(baseTxt) ;//misSpellTxt(baseTxt.split(/\s/ig)));
					textAreaFlowHighlight.appendText(baseTxt);
				}
				//*/
				//textArea.textFlow = TextConverter.importToFlow(simpleText, TextConverter.TEXT_LAYOUT_FORMAT);
				//highlightText.textFlow = TextConverter.importToFlow(simpleText, TextConverter.TEXT_LAYOUT_FORMAT);

				//CallLater.call(resetScrollPosistion, 2);

				textInput.text = 'The spall is wrng horable  In the furst paragruph of teh';
				
				
				
				sparkTextInputHighlight = new SpellingHighlighter(textInput);
				mxTextAreaHighlight = new SpellingHighlighter(mxTextArea);
				
				sparkTextPopupInputHighlight = new SpellingHighlighter(textInputFlow);
				
				retHighlighter = new SpellingHighlighter(ret);
				
				textAreaFlow.setFocus();
				sparkTextAreaHighlight = new SpellingHighlighter(textAreaFlowHighlight);
				//PluginFactoryDefaults.factories = oldPluginDefaults;
				
				underlineColor.selectedColor = 0xff0000;
				setHighlightColor();
				
				//Setup datagrid sample
				var one:DataGridColumn = new DataGridColumn('one');
				var two:DataGridColumn = new DataGridColumn('two');
				
				one.editable = true;
				two.editable = true;
				
				one.itemEditor = new DataGridEditRenderor();
				one.itemRenderer = new SpellingDataGridItemRenderer();
				
				dataGridSample.columns = [one, two];
				dataGridSample.editable = true;
				dataGridSample.dataProvider = new ArrayCollection([{one:'turst', two:'testing'}]);
				
				splLoader.wordListLoader.maximumParseTime
			}

			protected function misSpellTxt(txt:Array):String {
				var l:uint = txt.length;
				for (var i:uint=0;i<l;i++) {
					var word:String = txt[i];
					word = word.substring(0, word.length - 1);
					txt[i] = word;
				}

				return txt.join(' ');
			}

			protected function randomText():Array {
				var arr:Array = [];

				var txt:String = baseTxt;

				while (txt.length) {
					var sliceEnd:Number =  Math.random()*75<<0;
					arr.push(txt.slice(0,sliceEnd));
					txt = txt.slice(sliceEnd);
				}

				return arr;
			}

			protected function randFont():String {
				var fonts:Array = ['Arial', 'Bauhaus 93', 'Curlz MT', 'Verdana', 'Times New Roman'];
				return fonts[Math.random()*fonts.length<<0];
			}

			protected function randSize():Number {
				return Math.max(Math.random()*50<<0, 8);
			}

			protected function randColor():String {
				var base:uint = 0xffffff*Math.random()<<0;
				return '#'+base.toString(16);
			}

			protected function randStyle():String {
				var rand:Boolean = Math.random()<.5?true:false;
				return rand?FontPosture.ITALIC:FontPosture.NORMAL;
			}

			protected function resetScrollPosistion():void {
				textAreaFlow.textDisplay.verticalScrollPosition = 0;
			}

			protected function updateColumns():void {
				textAreaFlow.textFlow.columnCount = numColumnsStep.value;
				//textAreaFlowHighlight.textFlow.columnCount = numColumnsStep.value;
			}

			protected function setHighlighterProperty(event:Event):void {
				var cb:CheckBox = event.target as CheckBox;
				mxTextAreaHighlight[cb.label] = cb.selected;
				sparkTextAreaHighlight[cb.label] = cb.selected;
				splTag1.spellingHighlighter[cb.label] = cb.selected;
				splTag2.spellingHighlighter[cb.label] = cb.selected;
				sparkTextInputHighlight[cb.label] = cb.selected;
				sparkTextPopupInputHighlight[cb.label] = cb.selected;
			}

			protected function setHighlightColor():void {
				var color:uint =  0xaa<<24|underlineColor.selectedColor;
				mxTextAreaHighlight.color = color;
				//sparkTextAreaHighlight.color = color;
				sparkTextInputHighlight.color = color;
				
				splTag1.spellingHighlighter.color = color;
				splTag2.spellingHighlighter.color = color;
				splTag2.spellingHighlighter.update();
			}

			protected function ret_changeHandler(event:TextOperationEvent):void {

				// retHighlighter.update();

			}
			
			protected function clearText():void {
				textAreaFlow.text = '';
				splTag2.target = textAreaFlow;
			}
			
			protected function handleOpenDialog():void {
				PopUpManager.addPopUp(new DialogText(), this);
				
			}
			
		]]>
	</fx:Script>

	<s:HGroup>
		<s:CheckBox label="contextMenuEnabled" change="setHighlighterProperty(event)" />
		<s:CheckBox label="enabled" change="setHighlighterProperty(event)" />
		<s:CheckBox label="autoUpdate" change="setHighlighterProperty(event)" />
		<s:CheckBox label="enableOnFocus" change="setHighlighterProperty(event)" />
		<s:CheckBox label="ignoreSelectedWord" change="setHighlighterProperty(event)" />

		<mx:VBox>
			<s:Label text="highlight color" />
			<mx:ColorPicker id="underlineColor" change="setHighlightColor()" />
		</mx:VBox>
	</s:HGroup>

	<s:Button label="Open Dialog" click="handleOpenDialog()" />
	
	<s:RichEditableText id="ret" change="ret_changeHandler(event)" selectionHighlighting="always" width="300" height="200" left="10" top="40" />
	
	<s:HGroup width="100%">
		<s:Label text="mx:TextArea: " fontWeight="bold" width="33%" />
		<s:Label text="s:TextArea: " fontWeight="bold" width="33%" />
	</s:HGroup>
	<s:HGroup width="100%">
		<mx:TextArea id="mxTextArea" height="150" width="50%" />
		<s:TextArea id="textAreaText" height="100" width="50%" />
	</s:HGroup>

	<mx:Spacer height="15" />

	<s:Label text="s:TextInput: " fontWeight="bold" />
	<s:TextInput id="textInput" width="50%"/>
	
	<mx:DataGrid id="dataGridSample" />
	
	<mx:Spacer height="15" />

	<s:HGroup verticalAlign="middle">
		<s:Label text="s:TexArea(s): " fontWeight="bold" />
		<s:Label text="Num Columns" />
		<s:NumericStepper minimum="1" maximum="10" id="numColumnsStep" change="updateColumns()" />
	</s:HGroup>

	<s:VGroup id="textAreaGroup">
		<s:TextInput id="textInputFlow" width="100%" />
		<s:HGroup width="100%" height="100%">
			<s:Label text="test" />
			<s:TextArea id="textAreaFlow" width="50%" height="100%" />
			<s:TextArea id="textAreaFlowHighlight" width="50%" height="100%" />
			<s:Button label="Clear" click="clearText();" />
		</s:HGroup>
	</s:VGroup>

	<spelling:SPLTagFlex id="splTag1" target="{textAreaText}" enabled="true" />
	<spelling:SPLTagFlex id="splTag2" target="{textAreaFlow}" />
	
	<spelling:SPLWordListLoaderFlex id="splLoader" url='data/en_us.zlib' />

</s:VGroup>
