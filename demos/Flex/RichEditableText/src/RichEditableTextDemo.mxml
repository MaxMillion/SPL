<?xml version="1.0" encoding="utf-8"?>
<!--
/*
* SPL; AS3 Spelling library for Flash and the Flex SDK. 
* 
* Copyright (c) 2013 gskinner.com, inc.
* 
* Permission is hereby granted, free of charge, to any person
* obtaining a copy of this software and associated documentation
* files (the "Software"), to deal in the Software without
* restriction, including without limitation the rights to use,
* copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following
* conditions:
* 
* The above copyright notice and this permission notice shall be
* included in all copies or substantial portions of the Software.
* 
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*/
-->
<s:Application
			xmlns:fx="http://ns.adobe.com/mxml/2009"
			xmlns:s="library://ns.adobe.com/flex/spark"
			xmlns:mx="library://ns.adobe.com/flex/mx"
			xmlns:spelling="com.gskinner.spelling.*"
			width="100%" height="100%" creationComplete="init()"
			>
	
	<fx:Script>
		<![CDATA[
			import com.gskinner.spelldemo.data.UnderlineItem;
			import com.gskinner.spelling.SpellingHighlighter;
			import com.gskinner.text.RichEditableTextPluginFactory;
			import com.gskinner.text.TextHighlighter;
			
			import flash.text.engine.FontLookup;
			
			import flashx.textLayout.formats.TextAlign;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.events.ColorPickerEvent;
			
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;

			[Embed(source="assets/Icons.swf#CustomIcon")]
			public static var customIcon:Class;

			[Embed(source='assets/Icons.swf#WindowsIcon')]
			public var winIcon:Class;

			[Embed(source='assets/Icons.swf#OSXIcon')]
			public var osxIcon:Class;

			[Embed(source='assets/Icons.swf#DefaultIcon')]
			public var defaultIcon:Class;

			protected const defaultText:String = 'teh spall is wrng horable Lorem ipsum dolor sit amet, consectetur adipiscing elit.The ContainerCodntroller clafss defines the relationship between a TextFlow object and a container. A TextFlow may have one or more rectangular areas that can hold text; the text is said to be flowing through the containers. Each container is a Sprite that is the parent DisplayObject for the TextLines. Each conteeainer has a ContainerController that manxages the container; the controller hoxlds the targetr width and height for the teext area, rrr the crontainer withe TextLines, and handles scroeelling. Aww contwwroller also has a format assocuuiated with it that allows some formatting attnnributes to be appcvxlied to the text in the container. This allows, for invxvstance, a TextFlow to have one container where the text appvxcears in a single column, and a second container in the same TextvxcFlow with two column text. Not all formatting attribvxcutes that can be applied to the container will affect the text; only the ones that affect container-level layout. The diagram below illustrates the relationship betwdsdseen thwe TextFlow, its flowComposer, and the diswwplay list. blates';
			protected var txt:String = defaultText;
			
			protected var highlight:TextHighlighter;
			protected var spellHighlight:SpellingHighlighter;
			protected var fontList:Array;

			protected function init():void {
				previewText.text = txt;

				highlight = new TextHighlighter(previewText, null, [new RichEditableTextPluginFactory()]);

				var win:UnderlineItem = new UnderlineItem('Windows Style', winIcon);
				var osx:UnderlineItem = new UnderlineItem('OSX Style', osxIcon);
				var custom:UnderlineItem = new UnderlineItem('Custom Style', customIcon);
				var defaultStyle:UnderlineItem = new UnderlineItem('Default Style', defaultIcon);
				var dp:Array = [win, osx, custom, defaultStyle];

				underlineType.dataProvider = new ArrayList(dp);
				underlineType.selectedIndex = underlineType.dataProvider.length - 1;
				
				fontList = Font.enumerateFonts(true)
				fontList.sortOn('fontName', Array.CASEINSENSITIVE);

				fontFamilyList.dataProvider = new ArrayCollection(fontList);
				fontFamilyList.labelField = 'fontName';

				var fontIndex:Number = Math.random()*fontList.length | 0;

				previewText.textDisplay.selectable = true;
				previewText.textFlow.fontLookup = FontLookup.DEVICE;
				previewText.textFlow.fontFamily = fontList[fontIndex].fontName;

				fontFamilyList.selectedIndex = fontIndex;
				
				splLoader.wordListLoader.addEventListener(Event.COMPLETE, handleComplete, false, 0, true);
				splLoader.wordListLoader.addEventListener(IOErrorEvent.IO_ERROR, handleError, false, 0, true);
			}
			
			protected function handleError(event:Event):void {
				trace("Error");
			}
			
			protected function handleComplete(event:Event):void {
				trace("Loaded.");
			}

			protected function onChangeUnderlineType(event:IndexChangeEvent):void {
				var selectedItem:UnderlineItem = UnderlineItem(event.currentTarget.selectedItem);
				var label:String = selectedItem.label;
				var icon:Class = selectedItem.icon;

				if (label == 'Default Style') {
					splTag.spellingHighlighter.underlinePattern = null;
					return;
				}
				var clip:Sprite = new icon();

				var bmp:BitmapData = new BitmapData(clip.width, clip.height, true, 0x0);
				bmp.draw(clip, null, null, null, null, true);

				splTag.spellingHighlighter.underlinePattern = bmp;
			}

			protected function onPickHighlightColor(event:ColorPickerEvent):void {
				splTag.spellingHighlighter.color = event.color;

				if (highlight.wordList && highlight.wordList.length > 0) {
					highlight.color = event.color;
				}
			}

			protected function onChangeFontColor(event:ColorPickerEvent):void {
				previewText.textFlow.color = event.color;
			}

			protected function onChangeColumns():void {
				previewText.textFlow.columnCount = numColumns.value;
			}

			protected function onUseHighlighter(event:Event):void {
				if (event.target == useHighlighter) {
					splTag.enabled = false;
					highlight.color = highlightColor.selectedColor;
					highlight.enabled = true;
					searchText(searchTxt.text);
				} else {
					splTag.enabled = true;
					highlight.enabled = false;
				}
			}

			protected function onSearch(event:TextOperationEvent):void {
				var txt:String = event.currentTarget.text;
				searchText(txt);
			}
			
			protected function searchText(term:String):void {
				highlight.wordList = (term.length > 0) ? [term] : [];
			}

			protected function onChangeBaselineType(event:IndexChangeEvent):void {
				try {
					previewText.textFlow.alignmentBaseline = event.target.selectedItem
				} catch(e:RangeError) {
					Alert.show("Error-- " + e, "Range Error");
				}
			}

			protected function onChangeTracking(event:Event):void {
				previewText.textFlow.trackingRight = trackingValue.value;
			}

			protected function onChangeFontSize(event:Event):void {
				previewText.textFlow.fontSize = fontSizeValue.value;
			}

			protected function onChangeFont(event:IndexChangeEvent):void {
				var name:String = event.target.selectedItem.fontName
				previewText.textFlow.fontFamily = name;
			}

			protected function onChangePadding(event:Event):void {
				var type:String = event.currentTarget.id;
				var value:Number = event.currentTarget.value;
				switch(type) {
					case "paddingLeftValue":
						previewText.textFlow.paddingLeft = value;
						break;
					case "paddingRightValue":
						previewText.textFlow.paddingRight = value;
						break;
					case "paddingBottomValue":
						previewText.textFlow.paddingBottom = value;
						break;
					case "paddingTopValue":
						previewText.textFlow.paddingTop = value;
						break;
				}
			}

			protected function onAlignClick(event:MouseEvent):void {
				var type:String = event.currentTarget.id;
				switch(type) {
					case "alignToStart":
						previewText.textFlow.textAlign = TextAlign.START;
						break;
					case "alignToCenter":
						previewText.textFlow.textAlign = TextAlign.CENTER;
						break;
					case "alignToEnd":
						previewText.textFlow.textAlign = TextAlign.END;
						break;
					case "justifyLastToStart":
						previewText.textFlow.textAlign = TextAlign.JUSTIFY;
						previewText.textFlow.textAlignLast = TextAlign.START;
						break;
					case "justifyLastToCenter":
						previewText.textFlow.textAlign = TextAlign.JUSTIFY;
						previewText.textFlow.textAlignLast = TextAlign.CENTER;
						break;
					case "justifyLastToEnd":
						previewText.textFlow.textAlign = TextAlign.JUSTIFY;
						previewText.textFlow.textAlignLast = TextAlign.END;
						break;
					case "justifyAll":
						previewText.textFlow.textAlign = TextAlign.JUSTIFY;
						previewText.textFlow.textAlignLast = TextAlign.JUSTIFY;
						break;
				}
			}

		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:RadioButtonGroup id="paragraphRadGroup" />
	</fx:Declarations>
	
	<!-- Set-up our spelling environment. -->
	<spelling:SPLTagFlex id="splTag" target="{previewText}" />
	
	<!-- Load in the correct word list -->
	<spelling:SPLWordListLoaderFlex id="splLoader" url="../../../../wordlists/en_us/en_us.zlib" />
	
	<s:HGroup width="100%" paddingLeft="10" paddingTop="10" paddingRight="10" paddingBottom="10">
		<s:VGroup width="60%" height="100%" paddingTop="15" paddingBottom="13">
			<s:Label width="100%" text="This demo lets you customize the format of a Flex TextArea, the text is also editable, spelling will occur in real time, or you ca, utilize the TextHighligher to search all the text." />
			<s:TextArea id="previewText"  width="100%" height="100%"/>
		</s:VGroup>

		<s:VGroup width="40%" height="100%">
			<s:Label text="CHARACTER" backgroundColor="0xCCCCCC" width="100%" height="20" fontSize="15" paddingTop="5" paddingLeft="5"/>
			<s:VGroup width="100%">
				<s:HGroup>
					<s:Label text="Fonts: "/>
					<s:DropDownList id="fontFamilyList" width="200" change="onChangeFont(event)" />
				</s:HGroup>
				<s:HGroup>
					<s:Label text="Fonts Color: "/>
					<mx:ColorPicker id="fontColor" change="onChangeFontColor(event)" />
				</s:HGroup>
				<s:HGroup>
					<s:Label text="font size" />
					<s:HSlider id="fontSizeValue" width="100" maximum="50" minimum="5" value="12" change="onChangeFontSize(event)" />
				</s:HGroup>
				<s:HGroup>
					<s:Label text="tracking" />
					<s:HSlider id="trackingValue" width="100" maximum="50" minimum="-5" value="0" change="onChangeTracking(event)" />
				</s:HGroup>
			</s:VGroup>
			<s:Label text="PARAGRAPH" backgroundColor="0xCCCCCC" width="100%" height="20" fontSize="15" paddingTop="5" paddingLeft="5"/>
			<s:Label text="Align" />
			<s:TileGroup width="100%" height="100">
				<s:RadioButton id="alignToStart" groupName="paragraphRadGroup" selected="true" label="alignToStart" click="onAlignClick(event)"/>
				<s:RadioButton id="alignToCenter" groupName="paragraphRadGroup" label="alignToCenter" click="onAlignClick(event)"/>
				<s:RadioButton id="alignToEnd" groupName="paragraphRadGroup" label="alignToEnd" click="onAlignClick(event)"/>
				<s:RadioButton id="justifyLastToStart" groupName="paragraphRadGroup" label="justifyLastToStart" click="onAlignClick(event)"/>
				<s:RadioButton id="justifyLastToCenter" groupName="paragraphRadGroup" label="justifyLastToCenter" click="onAlignClick(event)"/>
				<s:RadioButton id="justifyLastToEnd" groupName="paragraphRadGroup" label="justifyLastToEnd" click="onAlignClick(event)"/>
				<s:RadioButton id="justifyAll" groupName="paragraphRadGroup" label="justifyAll" click="onAlignClick(event)"/>
			</s:TileGroup>
			<s:Label text="CONTAINER AND FLOW" backgroundColor="0xCCCCCC" width="100%" height="20" fontSize="15" paddingTop="5" paddingLeft="5"/>
			<s:HGroup>
				<s:VGroup>
					<s:Label text="Padding Left" />
					<s:HSlider id="paddingLeftValue" width="100" maximum="1000" minimum="0" value="0" change="onChangePadding(event)" />
					<s:Label text="Padding Right	" />
					<s:HSlider id="paddingRightValue" width="100" maximum="1000" minimum="0" value="0" change="onChangePadding(event)" />
					<s:Label text="Padding Top" />
					<s:HSlider id="paddingTopValue" width="100" maximum="1000" minimum="0" value="0" change="onChangePadding(event)" />
					<s:Label text="Padding Bottom" />
					<s:HSlider id="paddingBottomValue" width="100" maximum="1000" minimum="0" value="0" change="onChangePadding(event)" />
				</s:VGroup>
				<s:VGroup>
					<s:HGroup>
						<s:Label text="Columns: "/>
						<s:NumericStepper id="numColumns" minimum="1" maximum="10" change="onChangeColumns()"/>
					</s:HGroup>
				</s:VGroup>
			</s:HGroup>
			<s:Label text="Spelling Plus Library (SPL)" backgroundColor="0xCCCCCC" width="100%" height="20" fontSize="15" paddingTop="5" paddingLeft="5"/>
			<s:VGroup width="100%">
				<s:HGroup>
					<s:Label text="Highlight Color: "/>
					<mx:ColorPicker id="highlightColor" selectedColor="0xFF0000" change="onPickHighlightColor(event)"/>
				</s:HGroup>
				<s:HGroup>
					<s:RadioButton label="Check Spelling" change="onUseHighlighter(event)" selected="true" />
					<s:RadioButton id="useHighlighter" label="Search Text" change="onUseHighlighter(event)" />
				</s:HGroup>
				<s:HGroup id="splOptions" visible="{!useHighlighter.selected}" includeInLayout="{!useHighlighter.selected}">
					<s:Label text="Underline Style: "/>
					<s:DropDownList id="underlineType" width="150" itemRenderer="com.gskinner.spelldemo.renderers.IconRenderer" change="onChangeUnderlineType(event)" />
				</s:HGroup>
				<s:HGroup id="textOptions" visible="{useHighlighter.selected}" includeInLayout="{useHighlighter.selected}">
					<s:TextInput id="searchTxt" enabled="{useHighlighter.selected}" change="onSearch(event)" text="TextFlow" />
				</s:HGroup>
			</s:VGroup>
		</s:VGroup>
	</s:HGroup>

</s:Application>
