<!--
/*
* SPL; AS3 Spelling library for Flash and the Flex SDK. 
* 
* Copyright (c) 2013 gskinner.com, inc.
* 
* Permission is hereby granted, free of charge, to any person
* obtaining a copy of this software and associated documentation
* files (the "Software"), to deal in the Software without
* restriction, including without limitation the rights to use,
* copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following
* conditions:
* 
* The above copyright notice and this permission notice shall be
* included in all copies or substantial portions of the Software.
* 
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*/
-->
<mx:TitleWindow
	xmlns:mx="http://www.adobe.com/2006/mxml" modalTransparency=".1" modalTransparencyBlur="0"
	title="Spelling" showCloseButton="true" close="doClose()" removedFromStage="onRemoved()"
	paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5"
	>

	<mx:Script>
		<![CDATA[
			import com.gskinner.spelling.SpellingDictionary;
			import com.gskinner.spelling.SpellingDictionaryEvent;
			import com.gskinner.text.StringPosition;
			
			import mx.managers.PopUpManager;

			protected var _target:Object;
			protected var _textField:TextField;
			protected var spellingDictionary:SpellingDictionary;
			protected var ignoreWordHash:Object;
			protected var lastCheckIndex:uint = 0;
			protected var currentStringPosistion:StringPosition;
			protected var origonalAlwaysShowSelection:Boolean;

			public function set target(value:Object):void {
				if (value == null) {
					_textField = null;
				} else if (value is TextField) {
					_textField = (value as TextField);
				} else if (value.hasOwnProperty("textField")) {
					_textField = value["textField"];
				} else if (value is DisplayObjectContainer) {
					var tf:TextField = null;
					var tfSize:Number = 0;
					for (var i:uint=0; i<value.numChildren; i++) {
						var child:DisplayObject = value.getChildAt(i) as TextField;
						if (child) {
							if (child.width+child.height > tfSize) {
								tf = child as TextField;
								tfSize = child.width+child.height;
							}
						}
					}
					_textField = tf;
				} else {
					_textField = null;
				}
				_target = value;
			}

			public function checkSpelling(p_target:Object = null):void {
				if (p_target) { target = p_target; }
				lastCheckIndex = 0;
				origonalAlwaysShowSelection = _textField.alwaysShowSelection;
				if (!_textField.alwaysShowSelection) { _textField.alwaysShowSelection = true; }

				if (!spellingDictionary || !spellingDictionary.active) { init(); return; }
				onSpellingActivate(null);
			}

			protected function init():void {
				spellingDictionary = SpellingDictionary.getInstance();
				if (!spellingDictionary.active) {
					spellingDictionary.addEventListener(SpellingDictionaryEvent.ACTIVE, onSpellingActivate, false, 0, true);
					enableInterface(false);
					suggestionsList.dataProvider = [{label:'Waiting for Dictionary ...'}];
				} else {
					onSpellingActivate(null);
				}
			}

			protected function onRemoved():void {
				_textField.alwaysShowSelection = origonalAlwaysShowSelection;
			}

			protected function onSpellingActivate(p_event:SpellingDictionaryEvent):void {
				ignoreWordHash = { };
				enableInterface(true);
				spellingDictionary.checkString(_textField.text);
				checkNextWord();
			}

			protected function onComplete():void {
				suggestionsList.dataProvider = [{label:'Spelling complete'}];
				enableInterface(false);
			}

			protected function checkNextWord():void {
				currentStringPosistion = spellingDictionary.getNextMisspelledWord(_textField.text, lastCheckIndex);
				if (!currentStringPosistion) { onComplete(); return; }
				lastCheckIndex = currentStringPosistion.endIndex;

				if (ignoreWordHash[currentStringPosistion.subString]) { checkNextWord(); }

				suggestionsList.dataProvider = makeDataProvider(spellingDictionary.getSpellingSuggestions(currentStringPosistion.subString, 20, .7));				
				
				if (suggestionsList.dataProvider.length) {
					suggestionsList.selectedIndex = 0;
					changeWordSuggestion();
					highlightCurrentWord();
					suggestionsList.enabled = true;
				} else {					
					suggestionsList.dataProvider = [{label:'No suggestions'}];
					suggestedWord.text = currentStringPosistion.subString;
					highlightCurrentWord();
					suggestionsList.enabled = false;
				}

				misspelledWord.text = currentStringPosistion.subString;
			}

			protected function onSuggestionListChange():void {
				changeWordSuggestion();
			}

			protected function enableInterface(p_enabled:Boolean):void {
				changeBtn.enabled = p_enabled;
				ignoreBtn.enabled = p_enabled;
				ignoreAllBtn.enabled = p_enabled;
				addBtn.enabled = p_enabled;
				suggestionsList.enabled = p_enabled;
			}

			protected function changeWordSuggestion():void {
				suggestedWord.text = suggestionsList.selectedItem.label;
			}

			protected function makeDataProvider(p_array:Array):Array {
				var l:uint = p_array.length;
				var dp:Array = [];

				for (var i:uint=0;i<l;i++) {
					dp.push({label:p_array[i]});
				}

				return dp;
			}

			protected function doClose():void {
				PopUpManager.removePopUp(this);
			}

			protected function changeWord():void {
				var txt:String = _textField.text;
				_textField.text = txt.substring(0,currentStringPosistion.beginIndex)+suggestedWord.text+txt.substring(currentStringPosistion.endIndex);

				checkNextWord();
				_textField.dispatchEvent(new Event(Event.CHANGE,true,false));
			}

			protected function highlightCurrentWord():void {
				_textField.setSelection(currentStringPosistion.beginIndex,currentStringPosistion.endIndex);
			}

			protected function ignoreWord():void {
				checkNextWord();
			}

			protected function ignoreAll():void {
				ignoreWordHash[currentStringPosistion.subString] = true;
				checkNextWord();
			}

			protected function addWord():void {
				spellingDictionary.addCustomWord(currentStringPosistion.subString);
				checkNextWord();
			}
		]]>
	</mx:Script>

	<mx:HBox>

		<mx:VBox>
			<mx:HBox>
				<mx:Label text="Word: " />
				<mx:TextInput id="misspelledWord" editable="false" />
			</mx:HBox>

			<mx:Label text="Suggestions: " />
			<mx:TextInput id="suggestedWord" width="100%" />
			<mx:List id="suggestionsList" width="100%" change="onSuggestionListChange()" />
		</mx:VBox>

		<mx:VBox verticalGap="1" height="100%" paddingTop="{suggestionsList.y}">
			<mx:Button id="changeBtn" label="Change" width="100%" click="changeWord()" />
			<mx:Button id="ignoreBtn" label="Ignore" width="100%" click="ignoreWord()" />
			<mx:Button id="ignoreAllBtn" label="Ignore All" width="100%" click="ignoreAll()" />
			<mx:Spacer height="5" />
			<mx:Button id="addBtn" label="Add" width="100%" click="addWord()" />
			<mx:Spacer height="100%" />
			<mx:Button id="cancelBtn" label="Close" width="100%" click="doClose()" />
		</mx:VBox>

	</mx:HBox>
</mx:TitleWindow>